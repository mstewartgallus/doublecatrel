(* generated by Ott 0.31 from: ott/context.ott ott/term.ott ott/type.ott *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import Ott.ott_list_core.



Inductive type : Set := 
 | t_unit : type
 | t_prod (t:type) (t':type).
Lemma eq_type: forall (x y : type), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_type : ott_coq_equality.
Definition var : Set := nat.
Lemma eq_var: forall (x y : var), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_var : ott_coq_equality.

Inductive normal : Set := 
 | N_tt : normal
 | N_fanout (N:normal) (N':normal).

Inductive term : Set := 
 | v_var (x:var)
 | v_tt : term
 | v_fst (v:term)
 | v_snd (v:term)
 | v_fanout (v:term) (v':term).

Definition environment : Set := (list (var * type)).

Definition subst : Set := (list (var * term)).
Lemma eq_normal: forall (x y : normal), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_normal : ott_coq_equality.
Lemma eq_term: forall (x y : term), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_term : ott_coq_equality.

(** substitutions *)
Fixpoint subst_term (v5:term) (x5:var) (v_6:term) {struct v_6} : term :=
  match v_6 with
  | (v_var x) => (if eq_var x x5 then v5 else (v_var x))
  | v_tt => v_tt 
  | (v_fst v) => v_fst (subst_term v5 x5 v)
  | (v_snd v) => v_snd (subst_term v5 x5 v)
  | (v_fanout v v') => v_fanout (subst_term v5 x5 v) (subst_term v5 x5 v')
end.

(** definitions *)

(** funs toterm *)
Fixpoint toterm (x1:normal) : term:=
  match x1 with
  | N_tt => v_tt
  | (N_fanout N N') => (v_fanout  (toterm N )   (toterm N' ) )
end.

Coercion toterm: normal >-> term.

(** definitions *)

(** funs msubst *)
Fixpoint msubst (x1:subst) (x2:term) : term:=
  match x1,x2 with
  |  nil  , v => v
  |  (cons ( x ,  v' )  ρ )  , v =>  (msubst ρ  (  (subst_term  v'   x   v )  )  ) 
end.

(** definitions *)

(* defns dummy *)
Inductive jdummy : Prop :=    (* defn jdummy *).
(** definitions *)

(* defns find *)
Inductive mem : var -> type -> environment -> Prop :=    (* defn mem *)
 | mem_eq : forall (x:var) (t:type) (Γ:environment),
     mem x t  (cons ( x ,  t )  Γ ) 
 | mem_ne : forall (x:var) (t:type) (Γ:environment) (y:var) (t':type),
      ( x  <>  y )  ->
     mem x t Γ ->
     mem x t  (cons ( y ,  t' )  Γ ) .
(** definitions *)

(* defns judge_term *)
Inductive Jv : environment -> term -> type -> Prop :=    (* defn v *)
 | Jv_var : forall (Γ:environment) (x:var) (t:type),
     mem x t Γ ->
     Jv Γ (v_var x) t
 | Jv_tt : forall (Γ:environment),
     Jv Γ v_tt t_unit
 | Jv_fanout : forall (Γ:environment) (v1 v2:term) (t1 t2:type),
     Jv Γ v1 t1 ->
     Jv Γ v2 t2 ->
     Jv Γ (v_fanout v1 v2) (t_prod t1 t2)
 | Jv_fst : forall (Γ:environment) (v:term) (t1 t2:type),
     Jv Γ v (t_prod t1 t2) ->
     Jv Γ (v_fst v) t1
 | Jv_snd : forall (Γ:environment) (v:term) (t2 t1:type),
     Jv Γ v (t_prod t1 t2) ->
     Jv Γ (v_snd v) t2.
(** definitions *)

(* defns judge_subst *)
Inductive Jp : subst -> environment -> Prop :=    (* defn p *)
 | Jp_nil : 
     Jp  nil   nil 
 | Jp_cons : forall (ρ:subst) (x:var) (v:term) (Γ:environment) (t:type),
     Jv Γ v t ->
     Jp ρ Γ ->
     Jp  (cons ( x ,  v )  ρ )   (cons ( x ,  t )  Γ ) .
(** definitions *)

(* defns big *)
Inductive big : term -> normal -> Prop :=    (* defn big *)
 | big_tt : 
     big v_tt N_tt
 | big_fanout : forall (v1 v2:term) (N1 N2:normal),
     big v1 N1 ->
     big v2 N2 ->
     big (v_fanout v1 v2) (N_fanout N1 N2)
 | big_fst : forall (v:term) (N1 N2:normal),
     big v (N_fanout N1 N2) ->
     big (v_fst v) N1
 | big_snd : forall (v:term) (N2 N1:normal),
     big v (N_fanout N1 N2) ->
     big (v_snd v) N2.
Require Blech.Map.


Definition store : Set := (Map.map (type * normal)).

Inductive use : Set := 
 | u_used : use
 | u_unused : use.

Inductive span : Set := 
 | P_with (σ:store) (N:normal).

Inductive context : Set := 
 | E_lam (x:var) (E:context)
 | E_tt : context
 | E_fanout (E:context) (E':context)
 | E_neu (e:redex)
with redex : Set := 
 | e_var (x:var)
 | e_app (e:redex) (E':context)
 | e_step (e:redex) (E':context) (t:type)
 | e_let (x:var) (y:var) (e:redex) (E':context) (t:type)
 | e_cut (E:context) (t:type).

Definition usage : Set := (list use).

Definition vars : Set := (list var).

Definition tyspans : Set := (list (type * span)).

Definition spans : Set := (list span).

Definition nat : Set := nat.
Lemma eq_use: forall (x y : use), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_use : ott_coq_equality.
(** definitions *)

(** funs empty *)
Fixpoint mt (x1:nat) : usage:=
  match x1 with
  |  0  =>  nil 
  |  (S  n )  =>  (cons  u_unused    (mt n )  ) 
end.

(** definitions *)

(** funs xsofG *)
Fixpoint xsof (x1:environment) : vars:=
  match x1 with
  |  nil  =>  nil 
  |  (  (cons ( x ,  t )  Γ )  )  =>  (cons  x    (xsof Γ )  ) 
end.

(** definitions *)

(* defns lfind *)
Inductive lmem : var -> vars -> usage -> usage -> Prop :=    (* defn lmem *)
 | lmem_eq : forall (xs:vars) (x:var) (Δ:usage),
      (  (length  xs )   =   (length  Δ )  )  ->
     lmem x  (cons  x   xs )   (cons  u_unused   Δ )   (cons  u_used   Δ ) 
 | lmem_ne : forall (xs:vars) (x y:var) (Δ:usage) (u:use) (Δ':usage),
      ( x  <>  y )  ->
     lmem x xs Δ Δ' ->
     lmem x  (cons  y   xs )   (cons  u   Δ )   (cons  u   Δ' ) .
(** definitions *)

(* defns judge_context *)
Inductive infer : environment -> usage -> usage -> redex -> type -> Prop :=    (* defn infer *)
 | infer_var : forall (Γ:environment) (Δ Δ':usage) (x:var) (t:type),
     mem x t Γ ->
     lmem x  (xsof Γ )  Δ Δ' ->
     infer Γ Δ Δ' (e_var x) t
 | infer_app : forall (Γ:environment) (Δ1 Δ3:usage) (e1:redex) (E2:context) (t2:type) (Δ2:usage) (t1:type),
     infer Γ Δ1 Δ2 e1 (t_prod t1 t2) ->
     check Γ Δ2 Δ3 E2 t1 ->
     infer Γ Δ1 Δ3 (e_app e1 E2) t2
 | infer_step : forall (Γ:environment) (Δ1 Δ3:usage) (e1:redex) (E2:context) (t:type) (Δ2:usage),
     infer Γ Δ1 Δ2 e1 t_unit ->
     check Γ Δ2 Δ3 E2 t ->
     infer Γ Δ1 Δ3 (e_step e1 E2 t) t
 | infer_let : forall (Γ:environment) (Δ1 Δ3:usage) (x y:var) (e1:redex) (E2:context) (t3:type) (Δ2:usage) (t1 t2:type),
     infer Γ Δ1 Δ2 e1 (t_prod t1 t2) ->
     check  (cons ( y ,  t2 )   (cons ( x ,  t1 )  Γ )  )   (cons  u_unused    (cons  u_unused   Δ2 )  )   (cons  u_used    (cons  u_used   Δ3 )  )  E2 t3 ->
     infer Γ Δ1 Δ3 (e_let x y e1 E2 t3) t3
 | infer_cut : forall (Γ:environment) (Δ Δ':usage) (E:context) (t:type),
     check Γ Δ Δ' E t ->
     infer Γ Δ Δ' (e_cut E t) t
with check : environment -> usage -> usage -> context -> type -> Prop :=    (* defn check *)
 | check_lam : forall (Γ:environment) (Δ Δ':usage) (x:var) (E:context) (t1 t2:type),
     check  (cons ( x ,  t1 )  Γ )   (cons  u_unused   Δ )   (cons  u_used   Δ' )  E t2 ->
     check Γ Δ Δ' (E_lam x E) (t_prod t1 t2)
 | check_tt : forall (Γ:environment) (Δ:usage),
      (  (length  Γ )   =   (length  Δ )  )  ->
     check Γ Δ Δ E_tt t_unit
 | check_fanout : forall (Γ:environment) (Δ1 Δ3:usage) (E1 E2:context) (t1 t2:type) (Δ2:usage),
     check Γ Δ1 Δ2 E1 t1 ->
     check Γ Δ2 Δ3 E2 t2 ->
     check Γ Δ1 Δ3 (E_fanout E1 E2) (t_prod t1 t2)
 | check_neu : forall (Γ:environment) (Δ Δ':usage) (e:redex) (t:type),
     infer Γ Δ Δ' e t ->
     check Γ Δ Δ' (E_neu e) t.
(** definitions *)

(* defns sat *)
Inductive sate : store -> redex -> normal -> type -> Type :=    (* defn sate *)
 | sate_var : forall (x:var) (t:type) (N:normal),
     sate  (Map.one  x  ( t ,  N ))  (e_var x) N t
 | sate_step : forall (σ σ':store) (e:redex) (E':context) (t:type) (N:normal),
     sate σ e N_tt t_unit ->
     satE σ' E' N t ->
     sate  (Map.merge  σ   σ' )   ( (e_step e E' t) )  N t
 | sate_let : forall (σ σ':store) (x y:var) (e:redex) (E':context) (t:type) (N2 N0 N1:normal) (t1 t2:type),
     sate σ e (N_fanout N0 N1) (t_prod t1 t2) ->
     satE  (Map.merge   (Map.one  y  ( t2 ,  N1 ))     (Map.merge   (Map.one  x  ( t1 ,  N0 ))    σ' )  )  E' N2 t ->
     sate  (Map.merge  σ   σ' )   ( (e_let x y e E' t) )  N2 t
 | sate_app : forall (σ σ':store) (e:redex) (E':context) (N':normal) (t2:type) (N:normal) (t1:type),
     sate σ e (N_fanout N N') (t_prod t1 t2) ->
     satE σ' E' N t1 ->
     sate  (Map.merge  σ   σ' )   ( (e_app e E') )  N' t2
 | sate_cut : forall (σ:store) (E:context) (t:type) (N:normal),
     satE σ E N t ->
     sate σ  ( (e_cut E t) )  N t
with satE : store -> context -> normal -> type -> Type :=    (* defn satE *)
 | satE_tt : 
     satE  (Map.empty)  E_tt N_tt t_unit
 | satE_fanout : forall (σ σ':store) (E E':context) (N N':normal) (t1 t2:type),
     satE σ E N t1 ->
     satE σ' E' N' t2 ->
     satE  (Map.merge  σ   σ' )   ( (E_fanout E E') )  (N_fanout N N') (t_prod t1 t2)
 | satE_lam : forall (σ:store) (x:var) (E:context) (N N':normal) (t1 t2:type),
     satE  (Map.merge   (Map.one  x  ( t1 ,  N ))    σ )  E N' t2 ->
     satE σ  ( (E_lam x E) )  (N_fanout N N') (t_prod t1 t2)
 | satE_neu : forall (σ:store) (e:redex) (N:normal) (t:type),
     sate σ e N t ->
     satE σ  ( (E_neu e) )  N t.
(** definitions *)

(* defns sound *)
Inductive sound : context -> spans -> type -> Type :=    (* defn sound *)
 | sound_nil : forall (E:context) (t:type),
     sound E  nil  t
 | sound_cons : forall (E:context) (Ps:spans) (σ:store) (N:normal) (t:type),
     sound E Ps t ->
     satE σ E N t ->
     sound E  (cons  (P_with σ N)   Ps )  t
with sounde : redex -> tyspans -> Type :=    (* defn sounde *)
 | sounde_nil : forall (e:redex),
     sounde e  nil 
 | sounde_cons : forall (e:redex) (ts:tyspans) (σ:store) (N:normal) (t:type),
     sounde e ts ->
     sate σ e N t ->
     sounde e  (cons ( t ,  (P_with σ N) )  ts ) .


