(* generated by Ott 0.31 from: ott/context.ott ott/term.ott ott/type.ott *)

Require Import Arith.
Require Import Bool.
Require Import List.
Require Import Ott.ott_list_core.


Definition tyvar : Set := nat.
Lemma eq_tyvar: forall (x y : tyvar), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_tyvar : ott_coq_equality.

Inductive type : Set := 
 | t_var (A:tyvar)
 | t_unit : type
 | t_prod (t:type) (t':type).
Lemma eq_type: forall (x y : type), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_type : ott_coq_equality.
Require Blech.Assoc.

Definition var : Set := nat.
Lemma eq_var: forall (x y : var), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_var : ott_coq_equality.

Inductive expr : Set := 
 | V_var (x:var)
 | V_fst (V:expr)
 | V_snd (V:expr).

Inductive term : Set := 
 | v_tt : term
 | v_fanout (v:term) (v':term)
 | v_neu (V:expr).

Definition environment : Set := (Assoc.assoc type).

Definition subst : Set := (Assoc.assoc term).
Lemma eq_expr: forall (x y : expr), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_expr : ott_coq_equality.
Lemma eq_term: forall (x y : term), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_term : ott_coq_equality.
(** definitions *)

(** funs eta_expand *)
Fixpoint eta (x1:type) (x2:expr) : term:=
  match x1,x2 with
  | (t_var A) , V => (v_neu V)
  | t_unit , V => v_tt
  | (t_prod t1 t2) , V => (v_fanout  (eta t1  ( (V_fst V) )  )   (eta t2  ( (V_snd V) )  ) )
end.

(** definitions *)

(* defns dummy *)
Inductive jdum : Prop :=    (* defn jdum *).
(** definitions *)

(* defns find *)
Inductive mem : var -> type -> environment -> Prop :=    (* defn mem *)
 | mem_eq : forall (x:var) (t:type) (Γ:environment),
     mem x t  (cons ( x ,  t )  Γ ) 
 | mem_ne : forall (x:var) (t:type) (Γ:environment) (y:var) (t':type),
      ( x  <>  y )  ->
     mem x t Γ ->
     mem x t  (cons ( y ,  t' )  Γ ) .
(** definitions *)

(* defns judge_term *)
Inductive JV : environment -> expr -> type -> Prop :=    (* defn V *)
 | JV_var : forall (Γ:environment) (x:var) (t:type),
     mem x t Γ ->
     JV Γ (V_var x) t
 | JV_fst : forall (Γ:environment) (V:expr) (t1 t2:type),
     JV Γ V (t_prod t1 t2) ->
     JV Γ (V_fst V) t1
 | JV_snd : forall (Γ:environment) (V:expr) (t2 t1:type),
     JV Γ V (t_prod t1 t2) ->
     JV Γ (V_snd V) t2
with Jv : environment -> term -> type -> Prop :=    (* defn v *)
 | Jv_tt : forall (Γ:environment),
     Jv Γ v_tt t_unit
 | Jv_fanout : forall (Γ:environment) (v1 v2:term) (t1 t2:type),
     Jv Γ v1 t1 ->
     Jv Γ v2 t2 ->
     Jv Γ (v_fanout v1 v2) (t_prod t1 t2)
 | Jv_neu : forall (Γ:environment) (V:expr) (A:tyvar),
     JV Γ V (t_var A) ->
     Jv Γ (v_neu V) (t_var A).
(** definitions *)

(* defns judge_subst *)
Inductive Jp : environment -> subst -> environment -> Prop :=    (* defn p *)
 | Jp_nil : forall (Γ:environment),
     Jp Γ  nil   nil 
 | Jp_cons : forall (Γ':environment) (ρ:subst) (x:var) (v:term) (Γ:environment) (t:type),
     Jv Γ' v t ->
     Jp Γ' ρ Γ ->
     Jp Γ'  (cons ( x ,  v )  ρ )   (cons ( x ,  t )  Γ ) .
(** definitions *)

(* defns hsubstsV *)
Inductive hsubstsV : expr -> subst -> term -> Prop :=    (* defn hsubstsV *)
 | hsubstsV_var : forall (x:var) (ρ:subst) (v:term),
     Assoc.find x ρ = Some v  ->
     hsubstsV (V_var x) ρ v
 | hsubstsV_fst : forall (V:expr) (ρ:subst) (v1 v2:term),
     hsubstsV V ρ (v_fanout v1 v2) ->
     hsubstsV (V_fst V) ρ v1
 | hsubstsV_snd : forall (V:expr) (ρ:subst) (v2 v1:term),
     hsubstsV V ρ (v_fanout v1 v2) ->
     hsubstsV (V_snd V) ρ v2.
(** definitions *)

(* defns hsubstsv *)
Inductive hsubstsv : term -> subst -> term -> Prop :=    (* defn hsubstsv *)
 | hsubstsv_tt : forall (ρ:subst),
     hsubstsv v_tt ρ v_tt
 | hsubstsv_fanout : forall (v1 v2:term) (ρ:subst) (v1' v2':term),
     hsubstsv v1 ρ v1' ->
     hsubstsv v2 ρ v2' ->
     hsubstsv (v_fanout v1 v2) ρ (v_fanout v1' v2')
 | hsubstsv_neu : forall (V:expr) (ρ:subst) (v:term),
     hsubstsV V ρ v ->
     hsubstsv (v_neu V) ρ v.
Require Blech.Map.


Definition store : Set := (Map.map term).

Inductive span : Set := 
 | P_with (σ:store) (v:term).

Inductive use : Set := 
 | u_used : use
 | u_unused : use.

Inductive context : Set := 
 | E_lam (x:var) (E:context)
 | E_tt : context
 | E_fanout (E:context) (E':context)
 | E_neu (e:redex)
with redex : Set := 
 | e_var (x:var)
 | e_app (e:redex) (E':context)
 | e_step (e:redex) (E':context) (t:type)
 | e_let (x:var) (y:var) (e:redex) (E':context) (t:type)
 | e_cut (E:context) (t:type).

Definition spans : Set := (list span).

Definition stores : Set := (list store).

Definition usage : Set := (list use).

Definition vars : Set := (list var).

Definition nat : Set := nat.
Lemma eq_use: forall (x y : use), {x = y} + {x <> y}.
Proof.
  decide equality; auto with ott_coq_equality arith.
Defined.
Hint Resolve eq_use : ott_coq_equality.
(** library functions *)
Fixpoint list_mem A (eq:forall a b:A,{a=b}+{a<>b}) (x:A) (l:list A) {struct l} : bool :=
  match l with
  | nil => false
  | cons h t => if eq h x then true else list_mem A eq x t
end.
Arguments list_mem [A] _ _ _.


(** substitutions *)
Fixpoint subst_redex (e5:redex) (x5:var) (e_6:redex) {struct e_6} : redex :=
  match e_6 with
  | (e_var x) => (if eq_var x x5 then e5 else (e_var x))
  | (e_app e E') => e_app (subst_redex e5 x5 e) (subst_context e5 x5 E')
  | (e_step e E' t) => e_step (subst_redex e5 x5 e) (subst_context e5 x5 E') t
  | (e_let x y e E' t) => e_let x y (subst_redex e5 x5 e) (if list_mem eq_var x5 (app (cons x nil) (cons y nil)) then E' else (subst_context e5 x5 E')) t
  | (e_cut E t) => e_cut (subst_context e5 x5 E) t
end
with subst_context (e5:redex) (x5:var) (E5:context) {struct E5} : context :=
  match E5 with
  | (E_lam x E) => E_lam x (if list_mem eq_var x5 (cons x nil) then E else (subst_context e5 x5 E))
  | E_tt => E_tt 
  | (E_fanout E E') => E_fanout (subst_context e5 x5 E) (subst_context e5 x5 E')
  | (E_neu e) => E_neu (subst_redex e5 x5 e)
end.

(** definitions *)

(** funs empty *)
Fixpoint mt (x1:nat) : usage:=
  match x1 with
  |  0  =>  nil 
  |  (S  n )  =>  (cons  u_unused    (mt n )  ) 
end.

(** definitions *)

(** funs xsofG *)
Fixpoint xsof (x1:environment) : vars:=
  match x1 with
  |  nil  =>  nil 
  |  (  (cons ( x ,  t )  Γ )  )  =>  (cons  x    (xsof Γ )  ) 
end.

(** definitions *)

(* defns lfind *)
Inductive lmem : var -> vars -> usage -> usage -> Prop :=    (* defn lmem *)
 | lmem_eq : forall (xs:vars) (x:var) (Δ:usage),
      (  (length  xs )   =   (length  Δ )  )  ->
     lmem x  (cons  x   xs )   (cons  u_unused   Δ )   (cons  u_used   Δ ) 
 | lmem_ne : forall (xs:vars) (x y:var) (Δ:usage) (u:use) (Δ':usage),
      ( x  <>  y )  ->
     lmem x xs Δ Δ' ->
     lmem x  (cons  y   xs )   (cons  u   Δ )   (cons  u   Δ' ) .
(** definitions *)

(* defns judge_context *)
Inductive infer : environment -> usage -> usage -> redex -> type -> Prop :=    (* defn infer *)
 | infer_var : forall (Γ:environment) (Δ Δ':usage) (x:var) (t:type),
     mem x t Γ ->
     lmem x  (xsof Γ )  Δ Δ' ->
     infer Γ Δ Δ' (e_var x) t
 | infer_app : forall (Γ:environment) (Δ1 Δ3:usage) (e1:redex) (E2:context) (t2:type) (Δ2:usage) (t1:type),
     infer Γ Δ1 Δ2 e1 (t_prod t1 t2) ->
     check Γ Δ2 Δ3 E2 t1 ->
     infer Γ Δ1 Δ3 (e_app e1 E2) t2
 | infer_step : forall (Γ:environment) (Δ1 Δ3:usage) (e1:redex) (E2:context) (t:type) (Δ2:usage),
     infer Γ Δ1 Δ2 e1 t_unit ->
     check Γ Δ2 Δ3 E2 t ->
     infer Γ Δ1 Δ3 (e_step e1 E2 t) t
 | infer_let : forall (Γ:environment) (Δ1 Δ3:usage) (x y:var) (e1:redex) (E2:context) (t3:type) (Δ2:usage) (t1 t2:type),
     infer Γ Δ1 Δ2 e1 (t_prod t1 t2) ->
     check  (cons ( y ,  t2 )   (cons ( x ,  t1 )  Γ )  )   (cons  u_unused    (cons  u_unused   Δ2 )  )   (cons  u_used    (cons  u_used   Δ3 )  )  E2 t3 ->
     infer Γ Δ1 Δ3 (e_let x y e1 E2 t3) t3
 | infer_cut : forall (Γ:environment) (Δ Δ':usage) (E:context) (t:type),
     check Γ Δ Δ' E t ->
     infer Γ Δ Δ' (e_cut E t) t
with check : environment -> usage -> usage -> context -> type -> Prop :=    (* defn check *)
 | check_lam : forall (Γ:environment) (Δ Δ':usage) (x:var) (E:context) (t1 t2:type),
     check  (cons ( x ,  t1 )  Γ )   (cons  u_unused   Δ )   (cons  u_used   Δ' )  E t2 ->
     check Γ Δ Δ' (E_lam x E) (t_prod t1 t2)
 | check_tt : forall (Γ:environment) (Δ:usage),
      (  (length  Γ )   =   (length  Δ )  )  ->
     check Γ Δ Δ E_tt t_unit
 | check_fanout : forall (Γ:environment) (Δ1 Δ3:usage) (E1 E2:context) (t1 t2:type) (Δ2:usage),
     check Γ Δ1 Δ2 E1 t1 ->
     check Γ Δ2 Δ3 E2 t2 ->
     check Γ Δ1 Δ3 (E_fanout E1 E2) (t_prod t1 t2)
 | check_neu : forall (Γ:environment) (Δ Δ':usage) (e:redex) (t:type),
     infer Γ Δ Δ' e t ->
     check Γ Δ Δ' (E_neu e) t.
(** definitions *)

(* defns sat *)
Inductive produces : store -> redex -> term -> Type :=    (* defn produces *)
 | produces_var : forall (x:var) (v:term),
     produces  (Map.one  x   v )  (e_var x) v
 | produces_step : forall (σ σ':store) (e:redex) (E':context) (t:type) (v:term),
     produces σ e v_tt ->
     accepts σ' E' v ->
     produces  (Map.merge  σ   σ' )   ( (e_step e E' t) )  v
 | produces_let : forall (σ σ':store) (x y:var) (e:redex) (E':context) (t:type) (v2 v0 v1:term),
     produces σ e (v_fanout v0 v1) ->
     accepts  (Map.merge   (Map.one  y   v1 )     (Map.merge   (Map.one  x   v0 )    σ' )  )  E' v2 ->
     produces  (Map.merge  σ   σ' )   ( (e_let x y e E' t) )  v2
 | produces_app : forall (σ σ':store) (e:redex) (E':context) (v' v:term),
     produces σ e (v_fanout v v') ->
     accepts σ' E' v ->
     produces  (Map.merge  σ   σ' )   ( (e_app e E') )  v'
 | produces_cut : forall (σ:store) (E:context) (t:type) (v:term),
     accepts σ E v ->
     produces σ  ( (e_cut E t) )  v
with accepts : store -> context -> term -> Type :=    (* defn accepts *)
 | accepts_tt : 
     accepts  (Map.empty)  E_tt v_tt
 | accepts_fanout : forall (σ σ':store) (E E':context) (v v':term),
     accepts σ E v ->
     accepts σ' E' v' ->
     accepts  (Map.merge  σ   σ' )   ( (E_fanout E E') )  (v_fanout v v')
 | accepts_lam : forall (σ:store) (x:var) (E:context) (v v':term),
     accepts  (Map.merge   (Map.one  x   v )    σ )  E v' ->
     accepts σ  ( (E_lam x E) )  (v_fanout v v')
 | accepts_neu : forall (σ:store) (e:redex) (v:term),
     produces σ e v ->
     accepts σ  ( (E_neu e) )  v.
(** definitions *)

(* defns sound *)
Inductive sound : context -> stores -> term -> Type :=    (* defn sound *)
 | sound_nil : forall (E:context) (v:term),
     sound E  nil  v
 | sound_cons : forall (E:context) (Ss:stores) (σ:store) (v:term),
     sound E Ss v ->
     accepts σ E v ->
     sound E  (cons  σ   Ss )  v
with sounde : redex -> spans -> Type :=    (* defn sounde *)
 | sounde_nil : forall (e:redex),
     sounde e  nil 
 | sounde_cons : forall (e:redex) (Ps:spans) (σ:store) (v:term),
     sounde e Ps ->
     produces σ e v ->
     sounde e  (cons  (P_with σ v)   Ps ) .


