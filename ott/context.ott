embed
{{ coq-preamble
Require Blech.Map.
}}
grammar

context, E :: 'E_' ::=
  | lam x . E                ::   :: lam (+ bind x in E +)
  | tt                       ::   :: tt
  | E , E'                   ::   :: fanout
  | neu e                    ::   :: neu {{ tex [ [[e]] ] }}
  | ( E )                    :: S :: paren {{ icho ([[E]]) }}

redex, e :: 'e_' ::=
  | x                        ::   :: var
  | e E'                     ::   :: app
  | e ; E' : t               ::   :: step
  | let x , y = e in E' : t  ::   :: let (+ bind x union y in E' +)
  | cut E t                  ::   :: cut {{ tex [[E]] \colon [[t]] }}
  | ( e )                    :: S :: paren {{ icho ([[e]]) }}

use, u :: 'u_' ::= {{ coq-equality }}
  | used   ::  :: used
  | unused ::  :: unused

usage, D {{ tex \Delta }} {{ coq Î” }} :: 'D_' ::= {{ coq (Assoc.assoc use) }}
  | nil                  ::   :: nil {{ coq nil }}
  | D , x [ u ]          ::   :: cons {{ coq (cons ([[x]], [[u]]) [[D]]) }}

nat, n :: 'n_' ::= {{ coq nat }}
  | 0          ::  :: zero {{ coq 0 }}
  | S n        ::  :: succ {{ coq (S [[n]]) }} {{ tex [[n]] + 1 }}
  | len xs     :: M :: lenxs {{ coq (length [[xs]]) }}
  | len G      :: M :: lenG {{ coq (length [[G]]) }}
  | len D      :: M :: lenD {{ coq (length [[D]]) }}
  | ( n )      :: S :: paren {{ icho ([[n]]) }}

span, P :: 'P_' ::=
  | p |- v  ::   :: with

spans, Ps {{ tex P^* }} :: 'Ps_' ::= {{ coq (list span) }}
  | nil          ::   :: nil {{ coq nil }}
  | Ps , P       ::   :: cons {{ coq (cons [[P]] [[Ps]]) }}

vars, xs {{ tex x^* }} :: 'xs_' ::= {{ coq (list var) }}
  | nil          ::   :: nil {{ coq nil }}
  | xs , x       ::   :: cons {{ coq (cons [[x]] [[xs]]) }}
  | ( xs )       :: S :: paren {{ coq ([[xs]]) }}

terminals :: 'terminals_' ::=
  | :            ::   :: in     {{ tex \colon{} }}
  | |-           ::   :: turnstile   {{ tex \vdash{} }}
  | :=           ::   :: update  {{ tex \mathbin{:=} }}
  | ->           ::   :: to  {{ tex \rightarrow }}
  | &            ::   :: act  {{ tex \cdot }}
  | @            ::   :: compose  {{ tex \circ }}
  | unit         ::   :: unit  {{ tex \textbf{I} }}
  | *            ::   :: prod  {{ tex \otimes{} }}
  | used         ::   :: used  {{ tex \textbf{s} }}
  | unused       ::   :: unused  {{ tex \textbf{f} }}
  | #            ::   :: leaves  {{ tex \mathrel{\boxtimes} }}
  | tt           ::   :: tt   {{ tex \mathop{ \textbf ! } }}
  | fst          ::   :: fst  {{ tex \pi{}_1 }}
  | snd          ::   :: snd  {{ tex \pi{}_2 }}
  | lam          ::   :: lam  {{ tex \lambda{} }}
  | nil          ::   :: nil   {{ tex \bullet{} }}
  | let          ::   :: let  {{ tex \mathbin{\textbf{let} } }}
  | in           ::   :: letin  {{ tex \mathbin{\textbf{in} } }}
  | \in          ::   :: member  {{ tex \mathrel{\in} }}
  | \infer       ::   :: infer  {{ tex \Rightarrow }}
  | \check       ::   :: check  {{ tex \Leftarrow }}
  | once         ::   :: once  {{ tex \mathrel{\in!} }}
  | never        ::   :: never  {{ tex \mathrel{\notin} }}
  | ++            ::   :: merge  {{ tex \mathrel{\cup} }}
  | !            ::   :: big     {{ tex \mathrel{\Downarrow} }}
  | !=           ::   :: ne     {{ tex \mathrel{\ne} }}
  | ==           ::   :: equiv   {{ tex \mathrel{\sim} }}

substitutions
  single E x :: subst
  single e x :: subst
  single V x :: subst
  single v x :: subst
  single P x :: subst


grammar
formula :: formula_ ::=  
 | judgement                        ::   :: judgement
 | x != y                           :: M :: neqx {{ icho ([[x]] <> [[y]]) }}
 | x = y                            :: M :: eqx {{ icho ([[x]] = [[y]]) }}
 | n = n'                           :: M :: eqn {{ icho ([[n]] = [[n']]) }}

defns

lfind :: '' ::=

defn
x \in D # D' ::   :: lmem :: 'lmem_'
by

-------------------------------------- :: eq
x \in D, x [ unused ] # D, x [ used ]

x != y
x \in D # D'
-------------------------------- :: ne
x \in D, y [ u ] # D', y [ u ]

defns

scope :: '' ::=

defn
  D |- e # D' ::   :: se :: 'se_'
by

x \in D # D'
----------- :: var
D |- x # D'

D1 |- e1 # D2
D2 |- E2 # D3
------------------ :: app
D1 |- e1 E2 # D3

D1 |- e1 # D2
D2 |- E2 # D3
----------------------- :: step
D1 |- e1; E2 : t # D3

D1 |- e1 # D2
D2, x [unused], y[unused] |- E2 # D3, x[used], y[used]
------------------------------------------------------ :: let
D1 |- let x, y = e1 in E2 : t3 # D3

D |- E # D'
------------------- :: cut
D |- cut E t # D'

defn
  D |- E # D' ::   :: sE :: 'sE_'
by

D, x[unused] |- E #  D', x[used]
---------------------------------- :: lam
D |- lam x . E # D'

------------ :: tt
D |- tt # D

D1 |- E1 # D2
D2 |- E2 # D3
-------------------- :: fanout
D1 |- E1, E2 # D3

D |- e # D'
------------------- :: neu
D |- neu e # D'

defns

judge_context :: '' ::=

defn
G  |- e \infer t ::   :: infer :: 'infer_'
by

x: t \in G
----------------------- :: var
G |- x \infer t

G |- e1 \infer t1 * t2
G |- E2 \check t1
--------------------------------- :: app
G |- e1 E2 \infer t2

G |- e1 \infer unit
G |- E2 \check t
---------------------------------- :: step
G |- e1; E2 : t \infer t

G |- e1 \infer t1 * t2
G, x: t1, y: t2 |- E2 \check t3
------------------------------------------------- :: let
G |- let x, y = e1 in E2 : t3 \infer t3

G |- E \check t
---------------------------------- :: cut
G |- cut E t \infer t

defn
G |- E \check t ::   :: check :: 'check_'
by

G, x: t1 |- E \check t2
---------------------------------------- :: lam
G |- lam x . E \check t1 * t2

-------------------- :: tt
G |- tt \check unit

G |- E1 \check t1
G |- E2 \check t2
---------------------------- :: fanout
G |- E1, E2 \check t1 * t2

G |- e \infer t
---------------------- :: neu
G |- neu e \check t

defns

pfind :: '' ::=

defn
x := v \in p # p' ::   :: pmem :: 'pmem_'
by

----------------------------- :: eq
x := v \in p, x := v # p, x := tt

x != y
x := v \in p # p'
------------------------------------- :: ne
x := v \in p, y := v' # p', y := v'


defns

sat :: '' ::=

defn
  p |- e [ v ] # p' ::   :: produces :: 'produces_'
by

x := v \in p # p'
-------------------- :: var
p |- x [ v ] # p'

p1 |- e [ tt ] # p2
p2 |- E' [ v ] # p3
------------------------------- :: step
p1 |- (e; E': t) [ v ] # p3

p1 |- e [v0, v1] # p2
p2, x := v0, y := v1 |- E' [ v2 ] # p3, x := v0', y := v1'
----------------------------------------------------------- :: let
p1 |- (let x, y = e in E' : t) [ v2 ] # p3

p1 |- e [ v, v' ] # p2
p2 |- E' [v] # p3
----------------------------- :: app
p1 |- (e E') [ v' ] # p3

p1 |- E [ v ] # p2
----------------------------- :: cut
p1 |- (cut E t) [ v ] # p2

defn
  p |- E [ v ] # p' ::   :: accepts :: 'accepts_'
by

--------------- :: tt
p |- tt [tt] # p

p1 |- E [v] # p2
p2 |- E' [v'] # p3
--------------------------- :: fanout
p1 |- (E, E') [v, v'] # p3

p1, x := v1 |- E [ v2 ] # p2, x := v1'
-------------------------------------- :: lam
p1 |- (lam x. E) [ v1, v2 ] # p2

p1 |- e [ v ] # p2
--------------------------- :: neu
p1 |- (neu e) [ v ] # p2

defns

dummy :: '' ::=

defn
dumdum ::   :: sound :: 'sound_'
by

defns

jdummy :: '' ::=

defn
jdumdum ::   :: jsound :: 'jsound_'
by

% defns

% sound :: '' ::= {{ coq-universe Type }}

% defn
% E [ Ss ; v ] ::   :: sound :: 'sound_'
% by

% ------------- :: nil
% E [ nil ; v ]

% E [ Ss ; v ]
% p |- E [v] # p'
% ----------------- :: cons
% E [ Ss, p ; v ]


% defn
% e [ Ps ] ::   :: sounde :: 'sounde_'
% by

% -------------- :: nil
% e [ nil ]

% e [ Ps ]
% S |- e [v]
% -------------------- :: cons
% e [ Ps , S |- v ]
