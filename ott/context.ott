embed
{{ coq-preamble
Require Blech.Map.
}}
grammar

context, E :: 'E_' ::=
  | lam x . E                ::   :: lam (+ bind x in E +)
  | tt                       ::   :: tt
  | E , E'                   ::   :: fanout
  | neu e                    ::   :: neu {{ tex [ [[e]] ] }}
  | ( E )                    :: S :: paren {{ icho ([[E]]) }}

redex, e :: 'e_' ::=
  | x                        ::   :: var
  | e E'                     ::   :: app
  | e ; E' : t               ::   :: step
  | let x , y = e in E' : t  ::   :: let (+ bind x union y in E' +)
  | cut E t                  ::   :: cut {{ tex [[E]] \colon [[t]] }}
  | ( e )                    :: S :: paren {{ icho ([[e]]) }}

use, u :: 'u_' ::= {{ coq-equality }}
  | used   ::  :: used
  | unused ::  :: unused

usage, D {{ tex \Delta }} {{ coq Δ }} :: 'D_' ::= {{ coq (list use) }}
  | nil                  ::   :: nil {{ coq nil }}
  | D , u                ::   :: cons {{ coq (cons [[u]] [[D]]) }}

nat, n :: 'n_' ::= {{ coq nat }}
  | 0          ::  :: zero {{ coq 0 }}
  | S n        ::  :: succ {{ coq (S [[n]]) }} {{ tex [[n]] + 1 }}
  | len xs     :: M :: lenxs {{ coq (length [[xs]]) }}
  | len G      :: M :: lenG {{ coq (length [[G]]) }}
  | len D      :: M :: lenD {{ coq (length [[D]]) }}
  | ( n )      :: S :: paren {{ icho ([[n]]) }}

store, S {{ tex \sigma }} {{ coq σ }} :: 'S_'  ::= {{ coq (Map.map normal) }}
  | nil                   :: M :: empty {{ coq (Map.empty) }}
  | x := N            :: M :: one {{ coq (Map.one [[x]] [[N]]) }}
  | S , S'                :: M :: add {{ coq (Map.merge [[S']] [[S]]) }}
  | S ++ S'               :: M :: merge {{ coq (Map.merge [[S]] [[S']]) }}

span, P :: 'P_' ::=
  | S |- N  ::   :: with

spans, Ps {{ tex P^* }} :: 'Ps_' ::= {{ coq (list span) }}
  | nil          ::   :: nil {{ coq nil }}
  | Ps , P       ::   :: cons {{ coq (cons [[P]] [[Ps]]) }}

stores, Ss {{ tex S^* }} :: 'Ss_' ::= {{ coq (list store) }}
  | nil          ::   :: nil {{ coq nil }}
  | Ss , S       ::   :: cons {{ coq (cons [[S]] [[Ss]]) }}

vars, xs {{ tex x^* }} :: 'xs_' ::= {{ coq (list var) }}
  | nil          ::   :: nil {{ coq nil }}
  | xs , x       ::   :: cons {{ coq (cons [[x]] [[xs]]) }}
  | ( xs )       :: S :: paren {{ coq ([[xs]]) }}

terminals :: 'terminals_' ::=
  | :            ::   :: in     {{ tex \colon{} }}
  | |-           ::   :: turnstile   {{ tex \vdash{} }}
  | :=           ::   :: update  {{ tex \mathbin{:=} }}
  | ->           ::   :: to  {{ tex \rightarrow }}
  | unit         ::   :: unit  {{ tex \textbf{I} }}
  | *            ::   :: prod  {{ tex \otimes{} }}
  | used         ::   :: used  {{ tex \textbf{s} }}
  | unused       ::   :: unused  {{ tex \textbf{f} }}
  | tt           ::   :: tt   {{ tex \mathop{ \textbf ! } }}
  | fst          ::   :: fst  {{ tex \pi{}_1 }}
  | snd          ::   :: snd  {{ tex \pi{}_2 }}
  | lam          ::   :: lam  {{ tex \lambda{} }}
  | nil          ::   :: nil   {{ tex \bullet{} }}
  | let          ::   :: let  {{ tex \mathbin{\textbf{let} } }}
  | in           ::   :: letin  {{ tex \mathbin{\textbf{in} } }}
  | \in          ::   :: member  {{ tex \mathrel{\in} }}
  | \infer       ::   :: infer  {{ tex \colon }}
  | \check       ::   :: check  {{ tex \colon }}
  | once         ::   :: once  {{ tex \mathrel{\in!} }}
  | never        ::   :: never  {{ tex \mathrel{\notin} }}
  | ++            ::   :: merge  {{ tex \mathrel{\cup} }}
  | !            ::   :: big     {{ tex \mathrel{\Downarrow} }}
  | !=           ::   :: ne     {{ tex \mathrel{\ne} }}
  | ==           ::   :: equiv   {{ tex \mathrel{\sim} }}

parsing
  S_add left S_add

substitutions
  single E x :: subst
  single e x :: subst

grammar
formula :: formula_ ::=  
 | judgement                        ::   :: judgement
 | x != y                           :: M :: neqx {{ icho ([[x]] <> [[y]]) }}
 | x = y                            :: M :: eqx {{ icho ([[x]] = [[y]]) }}
 | n = n'                           :: M :: eqn {{ icho ([[n]] = [[n']]) }}

funs
  empty ::=
fun
  mt n :: D :: mt {{ tex \emptyset_{[[n]]} }}
by
  mt 0 === nil
  mt S n === mt n, unused

funs
  xsofG ::=
fun
  xsof G :: xs :: xsof
by
  xsof nil === nil
  xsof (G , x : t) === xsof G , x

defns

lfind :: '' ::=

defn
x \in xs ; D -> D' ::   :: lmem :: 'lmem_'
by

len xs = len D
---------------------------- :: eq
x \in xs, x ; D, unused -> D, used

x != y
x \in xs ; D -> D'
---------------------------- :: ne
x \in xs, y ; D, u -> D', u

defns

judge_context :: '' ::=

defn
G ; D -> D' |- e \infer t ::   :: infer :: 'infer_'
by

x: t \in G
x \in xsof G ; D -> D'
-------------------------- :: var
G ; D -> D' |- x \infer t

G ; D1 -> D2 |- e1 \infer t1 * t2
G ; D2 -> D3 |- E2 \check t1
--------------------------------- :: app
G ; D1 -> D3 |- e1 E2 \infer t2

G ; D1 -> D2 |- e1 \infer unit
G ; D2 -> D3 |- E2 \check t
---------------------------------- :: step
G ; D1 -> D3 |- e1; E2 : t \infer t

G ; D1 -> D2 |- e1 \infer t1 * t2
G, x: t1, y: t2 ; D2, unused, unused -> D3, used, used |- E2 \check t3
------------------------------------------------- :: let
G ; D1 -> D3 |- let x, y = e1 in E2 : t3 \infer t3

G ; D -> D' |- E \check t
---------------------------------- :: cut
G ; D -> D' |- cut E t \infer t

defn
G ; D -> D' |- E \check t ::   :: check :: 'check_'
by

G, x: t1 ; D, unused -> D', used |- E \check t2
---------------------------------------- :: lam
G ; D -> D' |- lam x . E \check t1 * t2

len G = len D
-------------------------------- :: tt
G ; D -> D |- tt \check unit

G ; D1 -> D2 |- E1 \check t1
G ; D2 -> D3 |- E2 \check t2
----------------------------------- :: fanout
G ; D1 -> D3 |- E1, E2 \check t1 * t2

G ; D -> D' |- e \infer t
---------------------------------- :: neu
G ; D -> D' |- neu e \check t

defns

sat :: '' ::= {{ coq-universe Type }}

defn
S |- e [ N ] ::   :: sate :: 'sate_' {{ tex [[S]] \mathrel{\vdash} [[e]] [ [[N]] ] }}
by

-------------------------- :: var
x := N |- x [ N ]

S |- e [ tt ]
S' |- E' [ N ]
------------------------------- :: step
S ++ S' |- (e; E': t) [ N ]

S |- e [N0, N1]
S', x := N0, y := N1 |- E' [ N2 ]
------------------------------------------------ :: let
S ++ S' |- (let x, y = e in E' : t) [ N2 ]

S |- e [ N, N' ]
S' |- E' [N]
----------------------------- :: app
S ++ S' |- (e E') [ N' ]

S |- E [ N ]
------------------------- :: cut
S |- (cut E t) [ N ]

defn
S |- E [ N ] ::   :: satE :: 'satE_' {{ tex [[S]] \mathrel{\vdash} [[E]] [ [[N]] ] }}
by

---------------------- :: tt
nil |- tt [tt]

S |- E [N]
S' |- E' [N']
------------------------------------- :: fanout
S ++ S' |- (E, E') [N, N']

S, x := N |- E [ N' ]
------------------------------------ :: lam
S |- (lam x. E) [ N, N' ]

S |- e [ N ]
--------------------------- :: neu
S |- (neu e) [ N ]

defns

sound :: '' ::= {{ coq-universe Type }}

defn
E [ Ss ; N ] ::   :: sound :: 'sound_'
by

-------------- :: nil
E [ nil ; N ]

E [ Ss ; N ]
S |- E [N]
-------------------- :: cons
E [ Ss, S ; N ]


defn
e [ Ps ] ::   :: sounde :: 'sounde_'
by

-------------- :: nil
e [ nil ]

e [ Ps ]
S |- e [N]
-------------------- :: cons
e [ Ps , S |- N ]
