embed
{{ coq-preamble
Require Blech.Map.
Require Blech.Sets.
}}
grammar

context, E :: 'E_' ::= {{ coq-equality }}
  | x                        ::   :: var
  | lam x : t . E            ::   :: lam (+ bind x in E +)
  | E E'                     ::   :: app
  | tt                       ::   :: tt
  | E ; E'                   ::   :: step
  | E , E'                   ::   :: fanout
  | let x , y = E in E'      ::   :: let (+ bind x union y in E' +)
  | ( E )                    :: S :: paren {{ icho ([[E]]) }}

linear, D {{ tex \Delta }} {{ coq Δ }} :: 'D_' ::= {{ coq Sets.set }}
  | nil                   ::   :: nil {{ coq Sets.empty }}
  | { x }                 :: M :: one {{ coq (Sets.one [[x]]) }}
  | D , D'                :: M :: add {{ coq (Sets.merge [[D']] [[D]]) }}
  | D ++ D'               :: M :: merge {{ coq (Sets.merge [[D]] [[D']]) }}

store, S {{ tex \sigma }} {{ coq σ }} :: 'S_'  ::= {{ coq (Map.map normal) }}
  | nil                   :: M :: empty {{ coq (Map.empty) }}
  | x := N                :: M :: one {{ coq (Map.one [[x]] [[N]]) }}
  | S , S'                :: M :: add {{ coq (Map.merge [[S']] [[S]]) }}
  | S ++ S'               :: M :: merge {{ coq (Map.merge [[S]] [[S']]) }}

span, P :: 'P_' ::=
  | S |- N  ::   :: with

set, Ps {{ tex P^* }} :: 'X_' ::= {{ coq (list span) }}
  | nil          ::   :: nil {{ coq nil }}
  | Ps , P       ::   :: cons {{ coq (cons [[P]] [[Ps]]) }}

terminals :: 'terminals_' ::=
  | :            ::   :: in     {{ tex \colon{} }}
  | |-           ::   :: turnstile   {{ tex \vdash{} }}
  | :=           ::   :: update  {{ tex \mathbin{:=} }}
  | ++           ::   :: merge   {{ tex \cup{} }}
  | unit         ::   :: unit  {{ tex \textbf{I} }}
  | *            ::   :: prod  {{ tex \otimes{} }}
  | tt           ::   :: tt   {{ tex \mathop{ \textbf ! } }}
  | fst          ::   :: fst  {{ tex \pi{}_1 }}
  | snd          ::   :: snd  {{ tex \pi{}_2 }}
  | lam          ::   :: lam  {{ tex \lambda{} }}
  | nil          ::   :: nil   {{ tex \bullet{} }}
  | let          ::   :: let  {{ tex \mathbin{\textbf{let} } }}
  | in           ::   :: letin  {{ tex \mathbin{\textbf{in} } }}
  | \in          ::   :: member  {{ tex \mathrel{\in} }}
  | once         ::   :: once  {{ tex \mathrel{\in!} }}
  | never        ::   :: never  {{ tex \mathrel{\notin} }}
  | !            ::   :: big     {{ tex \mathrel{\Downarrow} }}
  | !=           ::   :: ne     {{ tex \mathrel{\ne} }}
  | ==           ::   :: equiv   {{ tex \mathrel{\sim} }}

parsing
  S_add left S_add
  D_add left D_add

substitutions
  single E x :: subst

grammar
formula :: formula_ ::=  
 | judgement                        ::   :: judgement
 | x != y                           :: M :: neq {{ icho ([[x]] <> [[y]]) }}

defns

judge_context :: 'J' ::=

defn
G ; D |- E : t ::   :: E :: 'E_'
by

x: t \in G
------------------ :: var
G ; { x } |- x: t

G, x: t1 ; D, {x} |- E: t2
------------------------------- :: lam
G; D |- lam x: t1 . E: t1 * t2

G; D  |- E1: t1 * t2
G; D' |- E2: t1
---------------------- :: app
G; D ++ D' |- E1 E2: t2

------------------- :: tt
G; nil |- tt: unit

G; D |- E1: unit
G; D' |- E2: t
------------------------- :: step
G; D ++ D' |- E1; E2: t

G; D |- E1: t1
G; D' |- E2: t2
----------------------------- :: fanout
G; D ++ D' |- E1, E2: t1 * t2

G; D |- E1 : t1 * t2
G, x: t1, y: t2; D', {x}, {y} |- E2: t3
---------------------------------------- :: let
G; D ++ D' |- let x, y = E1 in E2: t3

defns

sat :: '' ::= {{ coq-universe Type }}

defn
S |- E [ N ] ::   :: sat :: 'sat_' {{ tex [[S]] \mathrel{\vdash} [[E]][ [[N]] ] }}
by

---------------------- :: var
x := N |- x [ N ]

------------------ :: tt
nil |- tt [tt]

S |- E [ tt ]
S' |- E' [ N ]
-------------------------- :: step
S ++ S' |- (E; E') [ N ]

S |-  E [N]
S' |-  E' [N']
-------------------------- :: fanout
S ++ S' |- (E, E') [N, N']

S |- E [N0, N1]
S', x := N0, y := N1 |- E' [ N2 ]
------------------------------------- :: let
S ++ S' |- (let x, y = E in E') [ N2 ]

S, x := N |- E [ N' ]
------------------------- :: lam
S |- (lam x: t. E) [ N, N' ]

S |- E [ N, N' ]
S' |- E' [N]
--------------------- :: app
S ++ S' |- (E E') [ N' ]

defns

sound :: '' ::= {{ coq-universe Type }}

defn
E [ Ps ] ::   :: sound :: 'sound_'
by

----------- :: nil
E [ nil ]

E [ Ps ]
S |- E [N]
---------------- :: cons
E [ Ps, S |- N ]
