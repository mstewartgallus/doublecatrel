embed
{{ coq-preamble
Require Blech.Map.
Require Import Metalib.Metatheory.
}}

metavar cvar, X, Y ::= {{ coq var }} {{ coq-equality apply Atom.eq_dec. }} {{ lex alphanum}} {{ tex \mathit{[[cvar]]} }}
grammar

nat :: 'nat_' ::= {{ coq nat }}
  | zero :: :: zero {{ coq 0 }}
  | one  :: :: one {{ coq 1 }}
  | nat + nat' :: :: add {{ coq ([[nat]] + [[nat']]) }}

context, E :: 'E_' ::= {{ coq-equality }}
  | X                        ::   :: var
  | lam X : t . E            ::   :: lam (+ bind X in E +)
  | E E'                     ::   :: app
  | tt                       ::   :: tt
  | E ; E'                   ::   :: step
  | E , E'                   ::   :: fanout
  | let X , Y = E in E'      ::   :: let (+ bind X union Y in E' +)
  | ( E )                    :: S :: paren {{ icho ([[E]]) }}

linear, D {{ tex \Delta }} {{ coq Δ }} :: 'D_' ::= {{ coq (list (cvar * type)) }}
  | nil               ::   :: empty {{ coq nil }}
  | D , X : t         ::   :: one {{ coq (cons ([[X]], [[t]]) [[D]]) }}

store, S {{ tex \sigma }} {{ coq σ }} :: 'S_'  ::= {{ coq (Map.map normal) }}
  | nil                   :: M :: empty {{ coq (Map.empty) }}
  | X := N                :: M :: one {{ coq (Map.one [[X]] [[N]]) }}
  | S , S'                :: M :: add {{ coq (Map.merge [[S']] [[S]]) }}
  | S ++ S'               :: M :: merge {{ coq (Map.merge [[S]] [[S']]) }}

span, P :: 'P_' ::=
  | S |- N  ::   :: with

set, Ps {{ tex P^* }} :: 'X_' ::= {{ coq (list span) }}
  | nil          ::   :: nil {{ coq nil }}
  | Ps , P       ::   :: cons {{ coq (cons [[P]] [[Ps]]) }}

terminals :: 'terminals_' ::=
  | :            ::   :: in     {{ tex \colon{} }}
  | |-           ::   :: turnstile   {{ tex \vdash{} }}
  | :=           ::   :: update  {{ tex \mathbin{:=} }}
  | ++           ::   :: merge   {{ tex \cup{} }}
  | unit         ::   :: unit  {{ tex \textbf{I} }}
  | *            ::   :: prod  {{ tex \otimes{} }}
  | tt           ::   :: tt   {{ tex \mathop{ \textbf ! } }}
  | fst          ::   :: fst  {{ tex \pi{}_1 }}
  | snd          ::   :: snd  {{ tex \pi{}_2 }}
  | lam          ::   :: lam  {{ tex \lambda{} }}
  | nil          ::   :: nil   {{ tex \bullet{} }}
  | let          ::   :: let  {{ tex \mathbin{\textbf{let} } }}
  | in           ::   :: letin  {{ tex \mathbin{\textbf{in} } }}
  | \in          ::   :: member  {{ tex \in{} }}
  | once         ::   :: once  {{ tex \mathbin{\textbf{once} } }}
  | never        ::   :: never  {{ tex \mathbin{\textbf{never} } }}
  | !            ::   :: big     {{ tex \mathrel{\Downarrow} }}
  | !=           ::   :: ne     {{ tex \mathrel{\ne} }}
  | ==           ::   :: equiv   {{ tex \mathrel{\sim} }}

parsing
  S_add left S_add

substitutions
  single E X :: subst

grammar
formula :: formula_ ::=  
 | judgement                        ::   :: judgement
 | x != y                           :: M :: neq {{ icho ([[x]] <> [[y]]) }}
 | X != Y                           :: M :: neqc {{ icho ([[X]] <> [[Y]]) }}

defns

Efind :: '' ::=

defn
X : t \in D ::   :: Emem :: 'Emem_'
by

----------------- :: eq
X: t \in D, X : t

X != Y
X: t \in D
-------------------- :: ne
X: t \in D, Y : t'

defns

nev :: '' ::=

defn
X never E :: :: never :: 'never_'
by

X != Y
--------- :: var
X never Y

--------------------- :: lam_eq
X never lam X : t. E

X never E
X != Y
--------------------- :: lam
X never lam Y : t. E

X never E
X never E'
------------ :: app
X never E E'

--------- :: tt
X never tt

X never E
X never E'
------------- :: step
X never E; E'

X never E
X never E'
------------- :: fanout
X never E, E'

X never E
X never E'
X != Y
X != Y'
---------------------------- :: let
X never let Y, Y' = E in E'

X never E
---------------------------- :: let_eq_1
X never let X, Y = E in E'

X never E
---------------------------- :: let_eq_2
X never let Y, X = E in E'

defns

onc :: '' ::=

defn
X once E :: :: once :: 'once_'
by

--------- :: var
X once X

X != Y
X once E
------------------- :: lam
X once lam Y: t. E

X once E
X never E'
------------- :: app_l
X once E E'

X never E
X once E'
------------- :: app_r
X once E E'

X once E
X never E'
------------- :: step_l
X once E; E'

X never E
X once E'
------------------- :: step_r
X once E; E'

X once E
X never E'
------------- :: fanout_l
X once E, E'

X never E
X once E'
------------------- :: fanout_r
X once E, E'

X once E
X never E'
X != Y
X != Y'
----------------------------- :: let_l
X once let Y, Y' = E in E'

X once E
---------------------------- :: let_l1
X once let X, Y = E in E'

X once E
----------------------------- :: let_l2
X once let Y, X = E in E'

X never E
X once E'
X != Y
X != Y'
----------------------------- :: let_r
X once let Y, Y' = E in E'


defn
l : t ::   :: E :: 'E_'
by

defns

judge_context :: 'J' ::=

defn
D |- E : t ::   :: E :: 'E_'
by

X : t \in D
------------ :: var
D |- X: t

D, X: t1 |- E: t2
X once E
---------------------------- :: lam
D |- lam X: t1 . E: t1 * t2

D |- E1: t1 * t2
D |- E2: t1
------------------ :: app
D |- E1 E2: t2

---------------- :: tt
D |- tt: unit

D |- E1: unit
D |- E2: t
------------------- :: step
D |- E1; E2: t

D |- E1: t1
D |- E2: t2
------------------- :: fanout
D |- E1, E2: t1 * t2

X once E2
Y once E2
D |- E1 : t1 * t2
D, X: t1, Y: t2 |- E2: t3
------------------------------------- :: let
D |- let X, Y = E1 in E2: t3

defns

sat :: '' ::=

defn
S |- E [ N ] ::   :: sat :: 'sat_' {{ tex [[S]] \mathrel{\vdash} [[E]][ [[N]] ] }}
by

---------------------- :: var
X := N |- X [ N ]

------------------ :: tt
nil |- tt [tt]

S |- E [ tt ]
S' |- E' [ N ]
-------------------------- :: step
S ++ S' |- (E; E') [ N ]

S |-  E [N]
S' |-  E' [N']
-------------------------- :: fanout
S ++ S' |- (E, E') [N, N']

S |- E [N0, N1]
S', X := N0, Y := N1 |- E' [ N2 ]
------------------------------------- :: let
S ++ S' |- (let X, Y = E in E') [ N2 ]

S, X := N |- E [ N' ]
------------------------- :: lam
S |- (lam X: t. E) [ N, N' ]

S |- E [ N, N' ]
S' |- E' [N]
--------------------- :: app
S ++ S' |- (E E') [ N' ]

defns

sound :: '' ::=

defn
E [ Ps ] ::   :: sound :: 'sound_'
by

----------- :: nil
E [ nil ]

E [ Ps ]
S |- E [N]
---------------- :: cons
E [ Ps, S |- N ]
