embed
{{ coq-preamble
Require Blech.Assoc.
}}
metavar var, x, y ::= {{ coq nat }} {{ coq-equality }} {{ lex alphanum}} {{ tex \mathit{[[var]]} }}
metavar axiom, K, A ::= {{ coq nat }} {{ coq-equality }} {{ lex alphanum}} {{ tex \mathit{[[axiom]]} }}

grammar
type, t :: 't_' ::= {{ coq-equality }}
  | A            ::   :: var
  | unit         ::   :: unit
  | t * t'       ::   :: prod
  | ( t )        :: S :: paren {{ coq ([[t]]) }}

use, u :: 'u_' ::= {{ coq-equality }}
  | used   ::  :: used
  | unused ::  :: unused

usage, D {{ tex \Delta }} {{ coq Δ }} :: 'D_' ::= {{ coq (Assoc.assoc use) }}
  | nil                  ::   :: nil {{ coq nil }}
  | D , x [ u ]          ::   :: cons {{ coq (cons ([[x]], [[u]]) [[D]]) }}

global, g :: 'g_' ::=
  | sort              ::   :: sort
  | t -> A            ::   :: function
  | t -/> A           ::   :: relation

signature, S {{ tex \Sigma }} {{ coq Σ }} :: 'S_' ::= {{ coq (Assoc.assoc global) }}
  | nil         ::   :: nil {{ coq nil }}
  | S , K : g       ::   :: add {{ coq (cons ([[K]], [[g]]) [[S]]) }}

% FIXME put sequents here
sequent, H :: 'H_' ::=
  | E [ v ] => E' [ v' ] ::  :: seq

theory, T :: 'T_' ::= {{ coq (list sequent) }}
  | nil         ::   :: nil {{ coq nil }}
  | T , H       ::   :: add {{ coq (cons [[H]] [[T]]) }}

environment, G {{ tex \Gamma }} {{ coq Γ }} :: 'G_' ::= {{ coq (Assoc.assoc type) }}
  | nil         ::   :: nil {{ coq nil }}
  | G , x : t   ::   :: add {{ coq (cons ([[x]], [[t]]) [[G]]) }}
  | ( G )       :: S :: paren {{ coq ([[G]]) }}
  | G ++ G'     :: M :: app {{ coq ([[G]] ++ [[G']]) }}

elim, V :: 'V_' ::= {{ coq-equality }}
  | x              ::   :: var
  | fst V          ::   :: fst
  | snd V          ::   :: snd
  | ( V )          :: S :: paren {{ icho ([[V]]) }}
intro, v :: 'v_' ::= {{ coq-equality }}
  | K v           ::   :: axiom
  | tt            ::   :: tt
  | v , v'        ::   :: fanout
  | neu ( V )     ::   :: neu {{ tex [ [[V]] ] }}
  | ( v )         :: S :: paren {{ icho ([[v]]) }}

context, E :: 'E_' ::=
  | K E                      ::   :: axiom
  | inj v                    ::   :: inj

  | true                     ::   :: true
  | false                    ::   :: false
  | E /\ E'                  ::   :: and
  | E \/ E'                  ::   :: or

  | lam x . E                ::   :: lam (+ bind x in E +)
  | tt                       ::   :: tt
  | E , E'                   ::   :: fanout
  | neu e                    ::   :: neu {{ tex [ [[e]] ] }}
  | ( E )                    :: S :: paren {{ icho ([[E]]) }}
redex, e :: 'e_' ::=
  | x                        ::   :: var
  | e E'                     ::   :: app
  | e ; E' : t               ::   :: step
  | let x , y = e in E' : t  ::   :: let (+ bind x union y in E' +)
  | cut E t                  ::   :: cut {{ tex [[E]] \colon [[t]] }}
  | ( e )                    :: S :: paren {{ icho ([[e]]) }}

subst, p {{ tex \rho }} {{ coq ρ }} :: 'p_'  ::= {{ coq (Assoc.assoc intro) }}
  | nil                   :: M :: nil {{ coq nil }}
  | p , x := v            :: M :: add {{ coq (cons ([[x]], [[v]]) [[p]]) }}
  | ( p )                 :: S :: paren {{ coq ([[p]]) }}

span, P :: 'P_' ::=
  | p |- v  ::   :: with

spans, Ps {{ tex P^* }} :: 'Ps_' ::= {{ coq (list span) }}
  | nil          ::   :: nil {{ coq nil }}
  | Ps , P       ::   :: cons {{ coq (cons [[P]] [[Ps]]) }}

formula :: formula_ ::=  
 | judgement                        ::   :: judgement
 | x != y                           :: M :: neqx {{ icho ([[x]] <> [[y]]) }}
 | x = y                            :: M :: eqx {{ icho ([[x]] = [[y]]) }}
 | n = n'                           :: M :: eqn {{ icho ([[n]] = [[n']]) }}

terminals :: 'terminals_' ::=
  | :            ::   :: in     {{ tex \colon{} }}
  | |-           ::   :: turnstile   {{ tex \vdash{} }}
  | :=           ::   :: update  {{ tex \mathbin{:=} }}
  | ->           ::   :: to  {{ tex \rightarrow }}
  | -/>          ::   :: rel  {{ tex \nrightarrow }}
  | &            ::   :: act  {{ tex \cdot }}
  | @            ::   :: compose  {{ tex \circ }}
  | unit         ::   :: unit  {{ tex \textbf{I} }}
  | sort         ::   :: sort  {{ tex \Box }}
  | *            ::   :: prod  {{ tex \otimes{} }}
  | used         ::   :: used  {{ tex \textbf{s} }}
  | unused       ::   :: unused  {{ tex \textbf{f} }}
  | #            ::   :: leaves  {{ tex \mathrel{\boxtimes} }}
  | tt           ::   :: tt   {{ tex \mathop{ \textbf ! } }}
  | fst          ::   :: fst  {{ tex \pi{}_1 }}
  | snd          ::   :: snd  {{ tex \pi{}_2 }}
  | true         ::   :: true  {{ tex \top }}
  | false        ::   :: false  {{ tex \bot }}
  | /\          ::   :: and  {{ tex \wedge }}
  | \/           ::   :: or  {{ tex \vee }}
  | lam          ::   :: lam  {{ tex \lambda{} }}
  | nil          ::   :: nil   {{ tex \bullet{} }}
  | let          ::   :: let  {{ tex \mathbin{\textbf{let} } }}
  | in           ::   :: letin  {{ tex \mathbin{\textbf{in} } }}
  | \in          ::   :: member  {{ tex \mathrel{\in} }}
  | \infer       ::   :: infer  {{ tex \Rightarrow }}
  | \check       ::   :: check  {{ tex \Leftarrow }}
  | once         ::   :: once  {{ tex \mathrel{\in!} }}
  | never        ::   :: never  {{ tex \mathrel{\notin} }}
  | ++           ::   :: merge  {{ tex \mathrel{\cup} }}
  | !            ::   :: big     {{ tex \mathrel{\Downarrow} }}
  | !=           ::   :: ne     {{ tex \mathrel{\ne} }}
  | ==           ::   :: equiv   {{ tex \mathrel{\sim} }}

funs
  eta_expand ::=
fun
  eta ( t , V ) :: v :: eta {{ tex \eta_{[[t]]} [[V]] }}
by
  eta ( A , V ) === neu( V )
  eta ( unit , V ) === tt
  eta (t1 * t2 , V ) === eta ( t1 , (fst V)), eta ( t2 , (snd V))

defns

find :: '' ::=

defn
x : t \in G ::   :: mem :: 'mem_'
by

----------------- :: eq
x: t \in G, x : t

x != y
x: t \in G
-------------------- :: ne
x: t \in G, y : t'

defns

judge_term :: 'J' ::=

defn
S [ G ] |- V \infer t ::   :: V :: 'V_'
by

x: t \in G
----------------- :: var
S[G] |- x \infer t

S[G] |- V \infer t1 * t2
------------------ :: fst
S[G] |- fst V \infer t1

S[G] |- V \infer t1 * t2
------------------ :: snd
S[G] |- snd V \infer t2

defn
S [ G ] |- v \check t ::   :: v :: 'v_'
by

{{ Assoc.find [[K]] [[S]] = Some [[t -> A]] }}
S[G] |- v \check t
------------------------------- :: axiom
S[G] |- K v \check A

----------------------- :: tt
S[G] |- tt \check unit

S[G] |- v1 \check t1
S[G] |- v2 \check t2
------------------------------ :: fanout
S[G] |- v1, v2 \check t1 * t2

S[G] |- V \infer A
----------------- :: neu
S[G] |- neu ( V) \check A

defns

judge_subst :: 'J' ::=

defn
S |- p : G -> G' ::   :: p :: 'p_'
by

--------------- :: bang
S |- nil: G -> nil

S[G1] |- v \check t
S |- p : G1 -> G2
----------------------------------- :: cut
S |- p, x := v : G1 -> G2, x: t

defns

bigV :: '' ::=

defn
p |- V ! v' ::   :: bigV :: 'bigV_'
by

{{ Assoc.find [[x]] [[p]] = Some [[v]] }}
------------------------------------------ :: var
p |- x ! v

p |- V ! v1, v2
----------------- :: fst
p |- fst V ! v1

p |- V ! v1, v2
----------------- :: snd
p |- snd V ! v2

defns

bigv :: '' ::=

defn
p |- v ! v' ::   :: bigv :: 'bigv_'
by

p |- v ! v'
------------------------ :: axiom
p |- K v ! K v'

------------- :: tt
p |- tt ! tt

p |- v1 ! v1'
p |- v2 ! v2'
----------------------- :: fanout
p |- v1, v2 ! v1', v2'

p |- V ! v
-------------------- :: neu
p |- neu( V ) ! v

defns

lfind :: '' ::=

defn
x \in D # D' ::   :: lmem :: 'lmem_'
by

-------------------------------------- :: eq
x \in D, x [ unused ] # D, x [ used ]

x != y
x \in D # D'
-------------------------------- :: ne
x \in D, y [ u ] # D', y [ u ]

defns

scope :: '' ::=

defn
  D |- e # D' ::   :: se :: 'se_'
by

x \in D # D'
----------- :: var
D |- x # D'

D1 |- e1 # D2
D2 |- E2 # D3
------------------ :: app
D1 |- e1 E2 # D3

D1 |- e1 # D2
D2 |- E2 # D3
----------------------- :: step
D1 |- e1; E2 : t # D3

D1 |- e1 # D2
D2, x [unused], y[unused] |- E2 # D3, x[used], y[used]
------------------------------------------------------ :: let
D1 |- let x, y = e1 in E2 : t3 # D3

D |- E # D'
------------------- :: cut
D |- cut E t # D'

defn
  D |- E # D' ::   :: sE :: 'sE_'
by

D |- E # D'
------------------------------- :: axiom
D |- K E # D'

D, x[unused] |- E #  D', x[used]
---------------------------------- :: lam
D |- lam x . E # D'

-------------- :: true
D |- true # D

-------------- :: false
D |- false # D

% FIXME I think and and or should be nonlinear?
D |- E # D'
D |- E' # D'
------------------- :: and
D |- E /\ E' # D'

D |- E # D'
D |- E' # D'
------------------- :: or
D |- E \/ E' # D'

------------ :: tt
D |- tt # D

D1 |- E1 # D2
D2 |- E2 # D3
-------------------- :: fanout
D1 |- E1, E2 # D3

D |- e # D'
------------------- :: neu
D |- neu e # D'

defns

judge_context :: '' ::=

defn
S [ G ]  |- e \infer t ::   :: infer :: 'infer_'
by

x: t \in G
----------------------- :: var
S[G] |- x \infer t

S[G] |- e1 \infer t1 * t2
S[G] |- E2 \check t1
--------------------------------- :: app
S[G] |- e1 E2 \infer t2

S[G] |- e1 \infer unit
S[G] |- E2 \check t
---------------------------------- :: step
S[G] |- e1; E2 : t \infer t

S[G] |- e1 \infer t1 * t2
S[G, x: t1, y: t2] |- E2 \check t3
------------------------------------------------- :: let
S[G] |- let x, y = e1 in E2 : t3 \infer t3

S[G] |- E \check t
---------------------------------- :: cut
S[G] |- cut E t \infer t

defn
S [ G ] |- E \check t ::   :: check :: 'check_'
by

{{ Assoc.find [[K]] [[S]] = Some [[t -/> A]] }}
S[G] |- E \check t
------------------------------- :: axiom
S[G] |- K E \check A

S[G] |- v \check t
------------------------ :: inject
S[G] |- inj v \check t

---------------------- :: true
S[G] |- true \check t

---------------------- :: false
S[G] |- false \check t

S[G] |- E \check t
S[G] |- E' \check t
------------------------ :: and
S[G] |- E /\ E' \check t

S[G] |- E \check t
S[G] |- E' \check t
------------------------ :: or
S[G] |- E \/ E' \check t

S[G, x: t1] |- E \check t2
---------------------------------------- :: lam
S[G] |- lam x . E \check t1 * t2

-------------------- :: tt
S[G] |- tt \check unit

S[G] |- E1 \check t1
S[G] |- E2 \check t2
---------------------------- :: fanout
S[G] |- E1, E2 \check t1 * t2

S[G] |- e \infer t
---------------------- :: neu
S[G] |- neu e \check t

defns

pfind :: '' ::=

defn
x := v \in p # p' ::   :: pmem :: 'pmem_'
by

--------------------------------- :: eq
x := v \in p, x := v # p, x := tt

x != y
x := v \in p # p'
------------------------------------- :: ne
x := v \in p, y := v' # p', y := v'


defns

sat :: '' ::=

defn
  T ; p |- e [ v ] # p' ::   :: produces :: 'produces_'
by

x := v \in p # p'
-------------------- :: var
T ; p |- x [ v ] # p'

T ; p1 |- e [ tt ] # p2
T ; p2 |- E' [ v ] # p3
------------------------------- :: step
T ; p1 |- (e; E': t) [ v ] # p3

T ; p1 |- e [v0, v1] # p2
T ; p2, x := v0, y := v1 |- E' [ v2 ] # p3, x := v0', y := v1'
-------------------------------------------------------------- :: let
T ; p1 |- (let x, y = e in E' : t) [ v2 ] # p3

T ; p1 |- e [ v, v' ] # p2
T ; p2 |- E' [v] # p3
----------------------------- :: app
T ; p1 |- (e E') [ v' ] # p3

T ; p1 |- E [ v ] # p2
----------------------------- :: cut
T ; p1 |- (cut E t) [ v ] # p2

defn
  T ; p |- E [ v ] # p' ::   :: accepts :: 'accepts_'
by

% {{ Assoc.find [[K]] [[T]] = Some [[E;v => E';v']] }}
% T ; p |- E [v] # p'
% ----------------------- :: axiom
% T ; p |- K E' [v'] # p'

----------------------- :: inject
T ; p |- inj v [v] # p

--------------------- :: true
T ; p |- true [v] # p

T ; p |- E [v] # p'
T ; p |- E' [v] # p'
-------------------------- :: and
T ; p |- E /\ E' [v] # p'

T ; p |- E [v] # p'
-------------------------- :: or_inl
T ; p |- E \/ E' [v] # p'

T ; p |- E' [v] # p'
-------------------------- :: or_inr
T ; p |- E \/ E' [v] # p'

--------------------- :: tt
T ; p |- tt [tt] # p

T ; p1 |- E [v] # p2
T ; p2 |- E' [v'] # p3
------------------------------- :: fanout
T ; p1 |- (E, E') [v, v'] # p3

T ; p1, x := v1 |- E [ v2 ] # p2, x := v1'
------------------------------------------- :: lam
T ; p1 |- (lam x. E) [ v1, v2 ] # p2

T ; p1 |- e [ v ] # p2
--------------------------- :: neu
T ; p1 |- (neu e) [ v ] # p2
