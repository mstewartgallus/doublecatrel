metavar var, x, y ::= {{ coq nat }} {{ coq-equality }} {{ lex alphanum}} {{ tex \mathit{[[var]]} }}

grammar
term, v :: 'v_' ::=
  | tt             ::   :: tt
  | v , v'         ::   :: fanout
  | neu V          ::   :: neu {{ tex [ [[V]] ] }}
  | ( v )          :: S :: paren {{ icho ([[v]]) }}
  | compare x y v  :: M :: compare {{ coq (match eq_var [[x]] [[y]] with | left _ => [[v]] | right _ => [[v]] end) }}

expr, V :: 'V_' ::=
  | x              ::   :: var
  | fst V          ::   :: fst
  | snd V          ::   :: snd
  | ( V )          :: S :: paren {{ icho ([[V]]) }}

normal, N :: 'N_' ::= {{ coq-equality }}
  | tt      ::   :: tt
  | N , N'  ::   :: fanout
  | ( N )   :: S :: paren {{ coq ([[N]]) }}

grammar

environment, G {{ tex \Gamma }} {{ coq Γ }} :: 'G_' ::= {{ coq (list (var * type)) }}
  | nil         ::   :: nil {{ coq nil }}
  | G , x : t   ::   :: add {{ coq (cons ([[x]], [[t]]) [[G]]) }}
  | ( G )       :: S :: paren {{ coq ([[G]]) }}

subst, p {{ tex \rho }} {{ coq ρ }} :: 'p_'  ::= {{ coq (list (var * term)) }}
  | nil                   :: M :: nil {{ coq nil }}
  | p , x := v            :: M :: add {{ coq (cons ([[x]], [[v]]) [[p]]) }}
  | ( p )                 :: S :: paren {{ coq ([[p]]) }}

substitutions
  single v x :: subst
  single V x :: subst

% subrules are awkward
funs
  toterm ::=
fun
  [ N ] :: v :: toterm {{ tex \llbracket [[N]] \rrbracket }}
by
  [ tt ] === tt
  [ N, N' ] === [ N ], [ N' ]

embed
{{ coq
Coercion toterm: normal >-> term.
}}

defns

dummy :: '' ::=

defn
jdummy ::   :: jdum :: 'jdum_'
by

defns

find :: '' ::=

defn
x : t \in G ::   :: mem :: 'mem_'
by

----------------- :: eq
x: t \in G, x : t

x != y
x: t \in G
-------------------- :: ne
x: t \in G, y : t'

defns

judge_term :: 'J' ::=

defn
G |- V : t ::   :: V :: 'V_'
by

x: t \in G
------------ :: var
G |- x: t

G |- V: t1 * t2
------------------ :: fst
G |- fst V: t1

G |- V: t1 * t2
------------------ :: snd
G |- snd V: t2

defn
G |- v : t ::   :: v :: 'v_'
by

--------------- :: tt
G |- tt: unit

G |- v1: t1
G |- v2: t2
------------------ :: fanout
G |- v1, v2: t1 * t2

G |- V: A
---------------- :: neu
G |- neu V : A


defns

judge_subst :: 'J' ::=

defn
G |- p : G' ::   :: p :: 'p_'
by

-------------- :: nil
G |- nil: nil

G' |- v : t
G' |- p: G
------------------------- :: cons
G' |- p, x := v: G, x: t
