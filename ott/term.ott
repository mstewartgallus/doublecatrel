metavar var, x, y ::= {{ coq nat }} {{ coq-equality }} {{ lex alphanum}} {{ tex \mathit{[[var]]} }}

grammar
term, v :: 'v_' ::=
  | tt             ::   :: tt
  | v , v'         ::   :: fanout
  | neu V          ::   :: neu {{ tex [ [[V]] ] }}
  | ( v )          :: S :: paren {{ icho ([[v]]) }}

expr, V :: 'V_' ::=
  | x              ::   :: var
  | fst V          ::   :: fst
  | snd V          ::   :: snd
  | cut v t        ::   :: cut {{ tex [[v]] \colon [[t]] }}
  | ( V )          :: S :: paren {{ icho ([[V]]) }}

normal, N :: 'N_' ::= {{ coq-equality }}
  | tt      ::   :: tt
  | N , N'  ::   :: fanout
  | ( N )   :: S :: paren {{ coq ([[N]]) }}

grammar

environment, G {{ tex \Gamma }} {{ coq Γ }} :: 'G_' ::= {{ coq (list (var * type)) }}
  | nil         ::   :: nil {{ coq nil }}
  | G , x : t   ::   :: add {{ coq (cons ([[x]], [[t]]) [[G]]) }}
  | ( G )       :: S :: paren {{ coq ([[G]]) }}

subst, p {{ tex \rho }} {{ coq ρ }} :: 'p_'  ::= {{ coq (list (var * expr)) }}
  | nil                   :: M :: nil {{ coq nil }}
  | p , x := V            :: M :: add {{ coq (cons ([[x]], [[V]]) [[p]]) }}
  | ( p )                 :: S :: paren {{ coq ([[p]]) }}

substitutions
  single v x :: subst
  single V x :: subst

% subrules are awkward
funs
  toterm ::=
fun
  [ N ] :: v :: toterm {{ tex \llbracket [[N]] \rrbracket }}
by
  [ tt ] === tt
  [ N, N' ] === [ N ], [ N' ]

embed
{{ coq
Coercion toterm: normal >-> term.
}}

defns

find :: '' ::=

defn
x : t \in G ::   :: mem :: 'mem_'
by

----------------- :: eq
x: t \in G, x : t

x != y
x: t \in G
-------------------- :: ne
x: t \in G, y : t'

defns

judge_term :: 'J' ::=

defn
G |- V : t ::   :: V :: 'V_'
by

x: t \in G
------------ :: var
G |- x: t

G |- V: t1 * t2
------------------ :: fst
G |- fst V: t1

G |- V: t1 * t2
------------------ :: snd
G |- snd V: t2

G |- v: t
---------------- :: cut
G |- cut v t : t

defn
G |- v : t ::   :: v :: 'v_'
by

--------------- :: tt
G |- tt: unit

G |- v1: t1
G |- v2: t2
------------------ :: fanout
G |- v1, v2: t1 * t2

G |- V: t
---------------- :: neu
G |- neu V : t


defns

judge_subst :: 'J' ::=

defn
p : G ::   :: p :: 'p_'
by

---------- :: nil
nil: nil

G |- V : t
p: G
------------------ :: cons
p, x := V: G, x: t

defns

big :: 'big' ::=

defn
v ! N ::   :: v :: 'v_'
by

-------------------- :: tt
tt ! tt

v1 ! N1
v2 ! N2
-------------------- :: fanout
v1, v2 ! N1, N2

V ! N
------------- :: neu
neu V ! N

defn
V ! N ::   :: V :: 'V_'
by

V ! N1, N2
---------- :: fst
fst V ! N1

V ! N1, N2
---------- :: snd
snd V ! N2

v ! N
------------- :: cut
cut v t ! N
