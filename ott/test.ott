embed
{{ coq
Require Blech.Map.
}}

metavar var, x ::= {{ coq nat }} {{ coq-equality }} {{ lex alphanum}} {{ tex \mathit{[[var]]} }}
indexvar index, i, m, n ::= {{ isa num }} {{ coq nat }}

grammar
type, t :: 't_' ::=
  | unit         ::   :: unit
  | t * t'       ::   :: prod

term, v :: 'v_' ::=
  | tt           ::   :: tt
  | fst v        ::   :: fst
  | snd v        ::   :: snd
  | v , v'       ::   :: fanout
  | ( v )        :: S :: paren {{ coq ([[v]]) }}
  | V [ v ]      :: M :: fill_context {{ icho (appctx_term_ctx_term [[V]] [[v]]) }}

context, E :: 'E_' ::=
  | x                        ::   :: var
  | forall x : t . E         ::   :: all (+ bind x in E +)
  | E E'                     ::   :: app
  | tt                       ::   :: tt
  | E ,, E'                  ::   :: step
  | E , E'                   ::   :: fanout
  | let ( x0 , x1 ) := E in E' ::   :: let (+ bind x0 union x1 in E' +)
  | ( E )                    :: S :: paren {{ icho ([[E]]) }}
  | [ x := E ] E'            :: M :: subst
                                  {{ icho (subst_context [[E]] [[x]] [[E']]) }}
  | e [ E ]                  :: M :: fill_context
                                  {{ icho (appctx_context_ctx_context [[e]] [[E]]) }}

environment, G {{ tex \Gamma }} :: 'G_' ::= {{ coq (Map.map type) }} {{ coq-universe Type }}
  | empty         ::   :: empty {{ coq Map.empty }}
  | G , x : t     ::   :: add {{ coq (Map.add [[x]] [[t]] [[G]]) }}
  | G ++ G'       ::   :: merge {{ coq (Map.merge [[G]] [[G']]) }}

seq, D {{ tex \Delta }} :: 'D_'  ::= {{ coq (Map.map term) }} {{ coq-universe Type }}
  | empty         ::   :: empty {{ coq Map.empty }}
  | D , x [ v ]   ::   :: add {{ coq (Map.add [[x]] [[v]] [[D]]) }}

term_norm, N :: 'N_' ::=
  | tt      ::  :: tt
  | N , N'  ::  :: fanout
  | ( N )   :: S :: paren {{ coq ([[N]]) }}

terminals :: 'terminals_' ::=
  | :            ::   :: in     {{ tex \colon{} }}
  | |-           ::   :: turnstile   {{ tex \vdash{} }}
  | :=           ::   :: update  {{ tex \mathbin{:=} }}
  | ++           ::   :: merge   {{ tex \cup{} }}
  | unit         ::   :: unit  {{ tex \top{} }}
  | *            ::   :: prod  {{ tex \times{} }}
  | ,,           ::   :: then  {{ tex ; }}
  | tt           ::   :: tt   {{ tex \mathop{ \textbf ! } }}
  | fst          ::   :: fst  {{ tex \pi{}_1 }}
  | snd          ::   :: snd  {{ tex \pi{}_2 }}
  | __           ::   :: hole    {{ tex [\cdot{}] }}
  | ==           ::   :: equiv  {{ tex \mathrel{\sim} }}
  | forall       ::   :: forall  {{ tex \exists{} }}
  | empty        ::   :: empty   {{ tex \bullet{} }}
  | !            ::   :: big     {{ tex \mathrel{\Downarrow} }}
  | ~>           ::   :: beta     {{ tex \mathrel{\rightarrow} }}
  | -->          ::   :: step     {{ tex \mathrel{\rightarrow} }}
  | *->          ::   :: multi     {{ tex \mathrel{\longrightarrow} }}

substitutions
  single context var :: subst 

subrules
  N <:: v

freevars
  context var :: fv

defns

judge_context :: 'J' ::= {{ coq-universe Type }}

defn
G |- E : t ::   :: E :: 'E_'
by

------------ :: var
empty , x: t |- x: t

G , x: t1 |- E: t2
-------------------------- :: abs
G |- forall x : t1 . E: t1 * t2

G1 |- E1: t1 * t2
G2 |- E2: t1
------------------ :: app
G1 ++ G2 |- E1 E2: t2

------------------- :: tt
empty |- tt: unit

G1 |- E1: unit
G2 |- E2: t
------------------- :: step
G1 ++ G2 |- E1,, E2: t

G1 |- E1: t1
G2 |- E2: t2
------------------- :: fanout
G1 ++ G2 |- E1, E2: t1 * t2

G1 |- E1 : t1 * t2
G2, x0: t1, x1: t2 |- E2: t3
------------------- :: let
G1 ++ G2 |- let (x0, x1) := E1 in E2: t3

defns

judge_term :: 'J' ::= {{ coq-universe Type }}

defn
|- v : t ::   :: v :: 'v_'
by

------------ :: tt
|- tt: unit

|- v1: t1
|- v2: t2
------------------ :: fanout
|- v1, v2: t1 * t2

|- v: t1 * t2
------------------ :: fst
|- fst v: t1

|- v: t1 * t2
------------------ :: snd
|- snd v: t2

defns

big :: '' ::= {{ coq-universe Type }}

defn
v ! N ::   :: big :: 'big_'
by

-------------------- :: tt
tt ! tt

v1 ! N1'
v2 ! N2'
-------------------- :: fanout
(v1, v2) ! (N1', N2')

v ! N1, N2
-------------------- :: fst
fst v ! N1

v ! N1, N2
------------------- :: snd
snd v ! N2

defns

sat :: '' ::=

defn
D |- E [ N ] ::   :: sat :: 'sat_'
by

{{ Map.find [[x]] [[D]] = Some [[N]] }}
--------------------- :: var
D |- x[N]

----------- :: tt
D |- tt[tt]

D |- E0[tt]
D |- E1[N]
--------------------- :: step
D |- (E0,, E1)[N]

D |- E0[N0]
D |- E1[N1]
--------------------- :: fanout
D |- (E0, E1)[N0, N1]


D |- E0[N0, N1]
D, x0[N0], x1[N1] |- E1[N2]
--------------------- :: let
D |- (let (x0, x1) := E0 in E1)[N2]

D, x[N0] |- E[N1]
------------------------------- :: abs
D |- (forall x: t. E) [N0, N1]

D |- E0[N0, N1]
D |- E1[N0]
------------------------ :: app
D |- (E0 E1)[N1]
