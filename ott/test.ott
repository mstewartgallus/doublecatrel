embed
{{ coq-preamble
Require Blech.Map.
}}

metavar vvar, x, y ::= {{ coq nat }} {{ coq-equality }} {{ lex alphanum}} {{ tex \mathit{[[vvar]]} }}
metavar cvar, X, Y ::= {{ coq nat }} {{ coq-equality }} {{ lex alphanum}} {{ tex \mathit{[[cvar]]} }}

grammar
type, t :: 't_' ::= {{ coq-equality }}
  | unit         ::   :: unit
  | t * t'       ::   :: prod

context, E :: 'E_' ::= {{ coq-equality }}
  | X                        ::   :: var
  | lam X : t . E            ::   :: lam (+ bind X in E +)
  | E E'                     ::   :: app
  | tt                       ::   :: tt
  | E ; E'                   ::   :: step
  | E , E'                   ::   :: fanout
  | let X , Y = E in E'      ::   :: let (+ bind X union Y in E' +)
  | ( E )                    :: S :: paren {{ icho ([[E]]) }}

term, v :: 'v_' ::= {{ coq-equality }}
  | x              ::   :: var
  | tt             ::   :: tt
  | fst v          ::   :: fst
  | snd v          ::   :: snd
  | v , v'         ::   :: fanout
  | ( v )          :: S :: paren {{ icho ([[v]]) }}
  | [ x := v ] v'  :: S :: subst {{ icho (subst_term [[v]] [[x]] [[v']]) }}

normal, N :: 'N_' ::= {{ coq-equality }}
  | tt      ::   :: tt
  | N , N'  ::   :: fanout
  | ( N )   :: S :: paren {{ coq ([[N]]) }}

linear, D {{ tex \Delta }} {{ coq Δ }} :: 'D_' ::= {{ coq (Map.map type) }}
  | nil           :: M :: empty {{ coq (Map.empty) }}
  | X : t         :: M :: one {{ coq (Map.one [[X]] [[t]]) }}
  | D , D'        :: M :: add {{ coq (Map.merge [[D']] [[D]]) }}
  | D ++ D'       :: M :: merge {{ coq (Map.merge [[D]] [[D']]) }}

environment, G {{ tex \Gamma }} {{ coq Γ }} :: 'G_' ::= {{ coq (list (vvar * type)) }}
  | nil         ::   :: nil {{ coq nil }}
  | G , x : t   ::   :: add {{ coq (cons ([[x]], [[t]]) [[G]]) }}
  | ( G )       :: S :: paren {{ coq ([[G]]) }}

store, S {{ tex \sigma }} {{ coq σ }} :: 'S_'  ::= {{ coq (Map.map normal) }}
  | nil                   :: M :: empty {{ coq (Map.empty) }}
  | X := N                :: M :: one {{ coq (Map.one [[X]] [[N]]) }}
  | S , S'                :: M :: add {{ coq (Map.merge [[S']] [[S]]) }}
  | S ++ S'               :: M :: merge {{ coq (Map.merge [[S]] [[S']]) }}

span, P :: 'P_' ::=
  | S |- N  ::   :: with

set, Ps {{ tex P^* }} :: 'X_' ::= {{ coq (list span) }}
  | nil          ::   :: nil {{ coq nil }}
  | Ps , P       ::   :: cons {{ coq (cons [[P]] [[Ps]]) }}

subst, p {{ tex \rho }} {{ coq ρ }} :: 'p_'  ::= {{ coq (list (vvar * normal)) }}
  | nil                   :: M :: nil {{ coq nil }}
  | p , x := N            :: M :: add {{ coq (cons ([[x]], [[N]]) [[p]]) }}
  | ( p )                 :: S :: paren {{ coq ([[p]]) }}

terminals :: 'terminals_' ::=
  | :            ::   :: in     {{ tex \colon{} }}
  | |-           ::   :: turnstile   {{ tex \vdash{} }}
  | :=           ::   :: update  {{ tex \mathbin{:=} }}
  | ++           ::   :: merge   {{ tex \cup{} }}
  | unit         ::   :: unit  {{ tex \textbf{I} }}
  | *            ::   :: prod  {{ tex \otimes{} }}
  | tt           ::   :: tt   {{ tex \mathop{ \textbf ! } }}
  | fst          ::   :: fst  {{ tex \pi{}_1 }}
  | snd          ::   :: snd  {{ tex \pi{}_2 }}
  | lam          ::   :: lam  {{ tex \lambda{} }}
  | nil          ::   :: nil   {{ tex \bullet{} }}
  | let          ::   :: let  {{ tex \mathbin{\textbf{let} } }}
  | in           ::   :: letin  {{ tex \mathbin{\textbf{in} } }}
  | \in          ::   :: member  {{ tex \in{} }}
  | !            ::   :: big     {{ tex \mathrel{\Downarrow} }}
  | ==           ::   :: equiv   {{ tex \mathrel{\sim} }}

parsing
  D_add left D_add
  S_add left S_add

substitutions
  single v x :: subst

% subrules are awkward
funs
  toterm ::=
fun
  [ N ] :: v :: toterm {{ tex \llbracket [[N]] \rrbracket }}
by
  [ tt ] === tt
  [ N, N' ] === [ N ], [ N' ]

embed
{{ coq
Coercion toterm: normal >-> term.
}}

funs
  msubst ::=
fun
  [ p ] v' :: v :: msubst
by
  [ nil ] v' === v'
  [p, x := N] v' === [p] ([ x := [N] ] v')

defns

judge_context :: 'J' ::=

defn
D |- E : t ::   :: E :: 'E_'
by

------------ :: var
X: t |- X: t

D, X: t1 |- E: t2
-------------------------- :: abs
D |- lam X: t1 . E: t1 * t2

D1 |- E1: t1 * t2
D2 |- E2: t1
------------------ :: app
D1 ++ D2 |- E1 E2: t2

------------------- :: tt
nil |- tt: unit

D1 |- E1: unit
D2 |- E2: t
------------------- :: step
D1 ++ D2 |- E1; E2: t

D1 |- E1: t1
D2 |- E2: t2
------------------- :: fanout
D1 ++ D2 |- E1, E2: t1 * t2

D1 |- E1 : t1 * t2
D2, X: t1, Y: t2 |- E2: t3
------------------- :: let
D1 ++ D2 |- let X, Y = E1 in E2: t3

defns

find :: '' ::=

defn
x : t \in G ::   :: mem :: 'mem_'
by

--------------------- :: eq
x: t \in G, x : t

{{ [[x]] <> [[x']] }}
x: t \in G
-------------------- :: ne
x: t \in G, x' : t'

defns

judge_term :: 'J' ::=

defn
G |- v : t ::   :: v :: 'v_'
by

x: t \in G
------------ :: var
G |- x: t

------------ :: tt
G |- tt: unit

G |- v1: t1
G |- v2: t2
------------------ :: fanout
G |- v1, v2: t1 * t2

G |- v: t1 * t2
------------------ :: fst
G |- fst v: t1

G |- v: t1 * t2
------------------ :: snd
G |- snd v: t2

defns

big :: '' ::=

defn
v ! N ::   :: big :: 'big_'
by

-------------------- :: tt
tt ! tt

v1 ! N1'
v2 ! N2'
-------------------- :: fanout
(v1, v2) ! (N1', N2')

v ! N1, N2
-------------------- :: fst
fst v ! N1

v ! N1, N2
------------------- :: snd
snd v ! N2

defns

sat :: '' ::=

defn
S |- E ! N ::   :: sat :: 'sat_'
by

---------------------- :: var
X := N |- X ! N

------------------ :: tt
nil |- tt ! tt

S |- E ! tt
S' |- E' ! N
-------------------------- :: step
S ++ S' |- E; E' ! N 

S |-  E ! N
S' |-  E' ! N'
-------------------------- :: fanout
S ++ S' |- E, E' ! N, N'

S |- E ! N0, N1 
S', X := N0, Y := N1 |- E' ! N2 
----------------------------------- :: let
S ++ S' |- let X, Y = E in E' ! N2 

S, X := N |- E ! N' 
------------------------- :: lam
S |- lam X: t. E ! N, N' 

S |- E ! N, N' 
S' |- E' ! N 
--------------------- :: app
S ++ S' |- E E' ! N' 

defns

judge :: 'J' ::=

defn
p : G ::   :: p :: 'p_'
by

---------- :: nil
nil: nil

nil |- [N] : t
p: G
------------------ :: cons
p, x := N: G, x: t

defns

sound :: '' ::=

defn
E ! Ps ::   :: sound :: 'sound_'
by

------- :: nil
E ! nil

E ! Ps
S |- E ! N
-------- :: cons
E ! Ps, S |- N
